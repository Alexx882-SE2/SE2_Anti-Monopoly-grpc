plugins {
    alias(libs.plugins.androidApplication)
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

android {
    namespace 'at.aau.anti_mon.client'
    compileSdk 34

    defaultConfig {
        applicationId "at.aau.anti_mon.client"
        minSdk 29
        targetSdk 34
        versionCode 2
        versionName "Come on Camembert 0.3"

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            // storeFile KeyStoreFile zum Signieren etc.
            // storePassword Passwort für den Keystore
            // keyAlias Name des Schlüssels der App im KeyStore
            // keyPassword Passwort des Schlüssels der App
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        //release {
        //    minifyEnabled false
        //    //proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        //    signingConfig signingConfigs.debug
        //}
    }
    compileOptions {

        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17

        // WTF? Wir hatten gesagt JAVA 17, das sollte auch jeder lokal bei sich auf der Maschine haben.
        //sourceCompatibility JavaVersion.VERSION_1_8
        //targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
          //  finalizedBy jacocoTestReport
        }
    }
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'

    reports {
        xml.required = true
        xml.destination file("${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml")
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${project.layout.buildDirectory.get().asFile}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    //sourceDirectories.from = files([mainSrc])
    //classDirectories.from = files([debugTree])
    executionData.from = files("${project.layout.buildDirectory.get().asFile}/jacoco/testDebugUnitTest.exec")
}

sonar {
  properties {
    property "sonar.projectKey", "dapopovic_SE2_Anti-Monopoly_Client"
    property "sonar.organization", "dapopovic"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
      property "sonar.exclusions", "**/client/*, **/client/**/*"
  }
}

dependencies {
    implementation libs.gson
    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    implementation(libs.okio)
    implementation libs.okhttp3.okhttp
    implementation libs.retrofit
    implementation libs.converter.jackson
    implementation libs.jackson.databind
    implementation libs.jackson.core
    implementation libs.jackson.annotations
    implementation libs.multidex
    implementation(libs.okhttpprofiler)
    implementation libs.eventbus
    //implementation(libs.okhttp.v490)


    testImplementation libs.junit
    testImplementation libs.junit.jupiter.api

    testRuntimeOnly libs.junit.jupiter.engine

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}
